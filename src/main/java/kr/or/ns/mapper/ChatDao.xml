<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ns.dao.ChatDao">

	<select id="getListChatRoom" resultType="hashmap">
		select * from chatroom
	</select>
	
	<!-- 방하나에 대한 정보 get  -->
	<select id="getChatRoom" resultType="kr.or.ns.vo.ChatRoom">
		select * from chatroom where ch_seq = #{ch_seq}
	</select>


	<!-- 방개설 -->
	<insert id="registerRoom" parameterType="hashmap">
		insert into
		chatroom(user_id, ch_title, ch_description, ch_write,
		ch_pw_check,
		ch_pw)
		values(#{user_id}, #{ch_title}, #{ch_description}, now(),
		#{ch_pw_check}, #{ch_pw})
	</insert>

	<!-- 방 패스워드 get  -->
	<select id="roomPw" parameterType="String" resultType="String">
		select
		ch_pw from chatroom where ch_seq=#{ch_seq}
	</select>

	<!-- 채팅방 입장시 멤버추가 -->
	<insert id="memberInsert" parameterType="kr.or.ns.vo.ChatRoomMember">
		insert into chatmember(user_id, ch_seq)
		select #{user_id}, #{ch_seq} from dual where not exists(select user_id from chatmember where user_id=#{user_id})
	</insert>
	
	<delete id="chatRoomOut" parameterType="kr.or.ns.vo.ChatRoomMember">
		delete from chatmember
		where ch_seq=#{ch_seq} and user_id=#{user_id}
	</delete>
	
	
	<update id="chatUpdate" parameterType="hashmap">
		update chatroom
		set ch_title=#{ch_title},
		ch_description=#{ch_description}
		where ch_seq=#{ch_seq}
	</update>
	
	
	<delete id="chatDelete" parameterType="kr.or.ns.vo.ChatRoomMember">
		delete from chatroom
		where ch_seq=#{ch_seq}
	</delete>
	
	<!-- 가장 먼저 들어온 데이터는 방장이기 때문에 cm_seq asc를 줘서 가장 첫번쨰로 뽑이는 데이터가 master  -->
	<select id="chatRoomMemberGet" resultType="hashmap">
		SELECT chatmember.cm_seq, users.nickname, users.profile_img
		FROM chatmember
		left outer join users
		on users.user_id = chatmember.user_id
		where chatmember.ch_seq = #{ch_seq}
        order by cm_seq
	</select>
	
	

</mapper>