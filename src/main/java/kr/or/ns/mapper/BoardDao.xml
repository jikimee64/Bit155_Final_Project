<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.or.ns.dao.BoardDao">

	<!-- 총 스터디게시글 수 -->
	<select id="getStudyBoardCount" resultType="Integer">
	SELECT COUNT(*) FROM STUDY_BOARD
	</select>
	
	
	<!-- 페이징 스터디 글목록 -->
<!-- 	<select id="getStudyBoardList" resultType="hashmap" parameterType="hashmap"> -->
	<select id="getStudyBoardList" resultType="hashmap" parameterType="kr.or.ns.vo.Criteria_Board">
		<![CDATA[
			SELECT *
			FROM STUDY_BOARD
			left outer join language_category
			on study_board.lan_seq = language_category.lan_seq
			left outer join location
			on study_board.loc_seq = location.loc_seq
			left outer join study_content_category
			on study_board.c_seq = study_content_category.c_seq
			ORDER BY S_SEQ DESC
			LIMIT #{pageStart}, #{perPageNum}
		]]>
	</select>

	<insert id="studyReg" parameterType="kr.or.ns.vo.Study">
		insert into study_board(user_id, c_seq, loc_seq, lan_seq, people, deadline, title, content, write_date, level, image, filesrc, filesrc2) 
		values(#{user_id}, #{c_seq},#{loc_seq},#{lan_seq},#{people},now(),#{title},#{content},now(), #{level}, #{image}, #{filesrc}, #{filesrc2})
	</insert>
	
	
	
	<!-- 스터디 글 상세보기 -->
	<select id="getStudy" resultType="hashmap">
		select *
		from study_board
		left outer join language_category
		on study_board.lan_seq = language_category.lan_seq
		left outer join location
		on study_board.loc_seq = location.loc_seq
		left outer join study_content_category
		on study_board.c_seq = study_content_category.c_seq
		WHERE study_board.S_SEQ=#{S_SEQ}
	</select>
	
	<!-- 댓글 개수  -->
	<select id="getReplyCnt" resultType="Integer">
		select count(*) 
		from comment
		WHERE s_seq=#{S_SEQ}
	</select>
	
	<delete id="delete">
		  DELETE from study_board WHERE S_SEQ=#{S_SEQ}
	</delete>
	
	
	<!-- 좋아요 추가 -->
	<insert id="heartinsert" parameterType="kr.or.ns.vo.Likes">
		INSERT INTO likes(user_id,s_seq,like_check) values(#{user_id},#{s_seq},1)
	</insert>
	
	<!-- 존재하는 좋아요인지 확인 -->
	<select id="heartcheck" parameterType="kr.or.ns.vo.Likes" resultType="int">
		select count(*) from likes
		where user_id = #{user_id} and s_seq = #{s_seq}
	</select>
	
	<!-- 좋아요의 체크유무번호 확인 -->
	<select id="heartnum" parameterType="kr.or.ns.vo.Likes" resultType="int">
		select like_check from likes
		where user_id = #{user_id} and s_seq = #{s_seq}
	</select>
	
	<!-- 기존 좋아요테이블에 업데이트 하러갑니다 -->
	<update id="heartupdate" parameterType="kr.or.ns.vo.Likes">
		update likes set like_check = #{like_check} 
		where user_id = #{user_id} and s_seq = #{s_seq}
	</update>
	
	<!-- 좋아요 총갯수 -->
	<select id="getLikeCnt"  resultType="int">
		select like_cnt from study_board
		where s_seq = #{s_seq}
	</select>

	<!-- 댓글 등록하기  -->
	<insert id="commentInsert" parameterType="kr.or.ns.vo.Comment" >
		insert into comment(s_seq, r_content,r_name,r_date,r_refer,r_depth,r_step)
		values(#{s_seq},#{r_content},#{r_name},now(),#{r_refer},#{r_depth},#{r_step})
	</insert> 
	
	<!-- 스터디 글 상세보기 -->
	<select id="getComment" resultType="hashmap">
		select * from comment
		WHERE S_SEQ = #{S_SEQ}
	</select>

	<!-- 댓글 삭제하기 -->
	<delete id="commentDelete" parameterType="kr.or.ns.vo.Comment" >
		  delete from comment where r_seq = #{r_seq} and s_seq = #{s_seq}
	</delete>
	
	<!-- 댓글 수정하기 -->
	<update id="commentUpdate" parameterType="kr.or.ns.vo.Comment">
		update comment set r_content = #{r_content} 
		where s_seq = #{s_seq} and r_seq = #{r_seq}
	</update>
	
	<!-- 댓글 갯수 -->
	<select id="countComment" parameterType="kr.or.ns.vo.Comment" resultType="int">
		select count(*) from comment
		where s_seq = #{s_seq}
	</select>
	
	<!-- 댓글 등록하기(대댓글)  -->
	<insert id="reCommentInsert" parameterType="kr.or.ns.vo.Comment" >
		insert into comment(s_seq, r_content,r_name,r_date,r_refer,r_depth,r_step)
		values(#{s_seq},#{r_content},#{r_name},now(),#{r_refer},#{r_depth},#{r_step})
	</insert> 
	
	<!-- refer , depth 조회  -->
	<select id="getReferDepth" parameterType="kr.or.ns.vo.Comment" resultType="hashmap">
		select r_depth from comment where s_seq = #{s_seq} and r_refer = #{r_refer}
	</select>
	
	<!-- MaxStep 조회  -->
	<select id="getMaxStep" parameterType="kr.or.ns.vo.Comment" resultType="int">
		select ifnull(max(r_step),0) from comment where r_depth=#{r_depth} and r_refer=#{r_refer}
	</select>
	
	<!-- MaxStep 조회  -->
	<select id="getMaxRefer" parameterType="kr.or.ns.vo.Comment" resultType="int">
		select ifnull(max(r_refer),0) r_refer from comment
	</select>
	
</mapper>